'''
Created on 31 may 2020

@author: https://github.com/hmcosentini
'''

ADLversion =  '0.1.0'   #script version

import os
from colorama import Fore, Back, init
# from PIL import Image
import glob
import cv2
import numpy as np

#VARIABLES - CONSTANTS-----------------------------------------------------------------------------------
display_width   = "0"
display_height  = "0"
matrix_file_name = ""
search_directory = ""
frames = 0
pixels_byte_code = []

#FUNCTIONS-----------------------------------------------------------------------------------------------

def folder_check(search_directory):
    print("Checking folders...") 

    #Check if the output folder exist if not the script creates a new one
    script_path = os.getcwd()+"\\"
    if not os.path.exists(script_path+'OUTPUT\\'):
        os.mkdir('OUTPUT\\')
        print ("Output folder added")
    
    #Check if the "user defined" folder exist if not the script creates a new one
    if not os.path.exists(script_path+search_directory+'\\'):
        os.mkdir(search_directory+'\\')
        print (Fore.LIGHTRED_EX+ "Image folder not found!!!")
        print (Fore.CYAN+ "Creating the folder please put your images in it!!! and execute againg the conversion")
        return False
    return True

def create_output_file(matrix_file_name):
    try:
        script_path = os.getcwd()+"\\"
        output_file =  open(script_path+'OUTPUT\\'+matrix_file_name+".h",'r')
        output_file.close()

    except IOError:
        print(Fore.CYAN + 'creating '+matrix_file_name+".h")
        script_path = os.getcwd()+"\\"
        output_file =  open(script_path+'OUTPUT\\'+matrix_file_name+".h",'w')
        output_file.write("//File generated by ADL PicToMatrix www.advanceddesignlabs.com"+ "\n")
        output_file.close()


def conversion(search_directory, matrix_file_name,display_width,display_height):
    if (folder_check(search_directory)):
        create_output_file(matrix_file_name)
        print("Scanning the images...")
        image_list = []
        script_path = os.getcwd()+"\\"
        for filename in glob.glob(script_path+search_directory+'\\''*.bmp'): #assuming gif
            # print(filename)
            im=cv2.imread(filename,0)
            image_list.append(im)
        
        if(len(image_list)>0):
            frames = len(image_list) 
            print (Fore.CYAN+ str(frames) + " frames found to add to "+matrix_file_name+".h")
            for img in image_list:
                height,width= img.shape
                if str(width) == display_width and str(height) == display_height:
                    # print("Image size: "+str(img.size))
                    # pixels_byte_code.clear()
                    x = 0
                    for i in range(height):
                        for j in range(16):
                            pixel_byte = 0
                            x +=1
                            # print(x,i,j)
                            if img[i,j*8+0] == 255:
                                pixel_byte = 128 | pixel_byte
                            if img[i,j*8+1] == 255:
                                pixel_byte = 64 | pixel_byte
                            if img[i,j*8+2] == 255:
                                pixel_byte = 32 | pixel_byte
                            if img[i,j*8+3] == 255:
                                pixel_byte = 16 | pixel_byte
                            if img[i,j*8+4] == 255:
                                pixel_byte = 8 | pixel_byte
                            if img[i,j*8+5] == 255:
                                pixel_byte = 4 | pixel_byte
                            if img[i,j*8+6] == 255:
                                pixel_byte = 2 | pixel_byte
                            if img[i,j*8+7] == 255:
                                pixel_byte = 1 | pixel_byte
                            pixels_byte_code.append(pixel_byte)
                    # print(len(pixels_byte_code))
                else:
                    print (Fore.LIGHTRED_EX+ "Image wrong size!!!(discarded)")
            
            #end for
            try:
                script_path = os.getcwd()+"\\"
                output_file =  open(script_path+'OUTPUT\\'+matrix_file_name+".h",'a')
                for frame in range(frames):
                    output_file.write("const unsigned char frame"+str(frame)+" [] = {\n")
                    cont = 0
                    aux_string=""
                    for byte in range(frame*1024,1024+frame*1024):
                        cont = cont +1
                        aux_string =aux_string+str(hex(pixels_byte_code[byte]))+", "
                        if (cont == 16):
                            output_file.write(aux_string+"\n")
                            aux_string = ""
                            cont =0        
                    output_file.write("};\n")
                    output_file.write("\n")
                output_file.close()
                print(script_path+'OUTPUT\\'+matrix_file_name+".h succesfully saved")

            except IOError:
                print(Fore.LIGHTRED_EX + 'Error output file not found...')

        else:
            print (Fore.LIGHTRED_EX+ "Images not founf in folder!!!")
            print (Fore.CYAN+ "Please add some pictures to the folder and execute againg the conversion")
    else:
        print (Fore.LIGHTRED_EX+ "CONVERSION canceled please add images to the folder-->"+search_directory)

#MAIN------------------------------------------------------------------------------------------------
def main():
    """
    Pictures to data matrif for monochrome oled/tft displays
    """
    
    os.system('cls')
    os.system('color 08')
    display_width   = "0"
    display_height  = "0"
    matrix_file_name = ""
    search_directory = ""

    
    print(Fore.CYAN + '**************************PICTOMATRIX******************************')
    print(Fore.CYAN + '*******   Version: '+ ADLversion + '                                    *******')
    print(Fore.CYAN + '*******   Author:  Humberto Matias Cosentini                *******')
    print(Fore.CYAN + '*******   email:   contact@advanceddesignlabs.com       *******')
    print(Fore.CYAN + '*******************************************************************\n\r')
    
    invalid_menu = True
    not_exit_program = True
    while not_exit_program:
        print(Fore.CYAN + '*******************************************************************')
        print(Fore.CYAN + 'The application will check the directory searching for BPM image.The')
        print(Fore.CYAN + 'images names will be use to generate the frames in a file .h')
        print(Fore.CYAN + 'NOTES:')
        print(Fore.CYAN + '\tTry to keep the image names short')
        print(Fore.CYAN + '\tTry to numerate te animations frames')
        print(Fore.CYAN + '*******************************************************************')
        print(Fore.CYAN + 'Current screen size:')
        print(Fore.CYAN + '\tWidth:\t'+Fore.YELLOW+display_width)
        print(Fore.CYAN+'\tHeight:\t'+Fore.YELLOW+display_height)
        print(Fore.CYAN+'\tSave matrix to:\t'+Fore.YELLOW+matrix_file_name)
        print(Fore.CYAN+'\tSearch for image in the following directory:\t'+Fore.YELLOW+search_directory)
        print(Fore.CYAN+'*******************************************************************')
        print(Fore.CYAN + 'Please choose one of the options and press ENTER')
        print(Fore.CYAN + '\t1-DEFINE screen size, output file, and images directory')
        print(Fore.CYAN + '\t2-START CONVERSION')
        # print('\t3-START CONVERSION')
        print(Fore.CYAN + '\t4-EXIT\n\r')
        print(Fore.CYAN + '*******************************************************************')
        while invalid_menu:
            selection = input('<> ')
            if selection == '1':
                os.system('cls')
                print('Change width...')
                display_width = input('<> ')
                print('Change heigth...')
                display_height = input('<> ')
                print('Type output file name...')
                matrix_file_name = input('<> ')
                invalid_menu = False
                search_directory = input('<> ')
                invalid_menu = False
                
            elif selection == '2':
                os.system('cls')
                print('Starting conversion...')
                conversion(search_directory, matrix_file_name,display_width,display_height)
                invalid_menu = False
               
            elif selection == '3':
                os.system('cls')
                print('...')
                invalid_menu = False
            
               
            elif selection == '4':
                print(Fore.CYAN + 'Closing program*****************************************************')
                os.system('cls')
                invalid_menu = False
                not_exit_program = False
            else:
                print(Fore.LIGHTRED_EX+ 'Invalid OPTION')
        invalid_menu = True
   
if __name__ == "__main__":
    main()
